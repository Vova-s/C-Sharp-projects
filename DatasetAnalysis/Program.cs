using System;
using System.Collections;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Excel = Microsoft.Office.Interop.Excel;
using Microsoft.Office.Interop.Excel;

namespace DatasetAnalysis
{
    internal class Program
    {
        public static int b = 0;
        public static int c = 0;
        Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
        static void Main(string[] args)
        {
            Excel.Workbook xlWorkBook;
            Excel.Worksheet xlWorkSheet;
            Excel.Worksheet xlWorkSheet1;
            Excel.Worksheet xlWorkSheet2;
            Excel.Application xlApp;
            object misValue = System.Reflection.Missing.Value;
            Excel.Range xlRange;
            xlApp = new Excel.Application();
            xlWorkBook = xlApp.Workbooks.Open(@"C:\Users\VOVAN\Desktop\lab.xlsx");

            foreach (dynamic worksheet in xlWorkBook.Worksheets)
            {
                worksheet.Cells.clear();
                worksheet.chartobjects().delete();

            }
            xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);
            xlWorkSheet1 = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(2);
            xlWorkSheet2 = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(3);
            Random rnd = new Random();
            int[] test_array = new int[100] { 105200, 149600, 85066, 105500, 93800, 160000, 140000, 163800, 75000, 48289, 85000, 172800, 100000, 170000, 9727, 144000, 160000, 180000, 175000, 158000, 145000, 106020, 163800, 85000, 165000, 90700, 142200, 260000, 125000, 95000, 180000, 55000, 185900, 155000, 165000, 151800, 48289, 75000, 110000, 146000, 130000, 123700, 310000, 130000, 110600, 184590, 130000, 203000, 48000, 184000, 200000, 122000, 153600, 153600, 160000, 154600, 100000, 150000, 158000, 160000, 125000, 172500, 147100, 162500, 138000, 170000, 224000, 122700, 231250, 70000, 252000, 125000, 183000, 190000, 60000, 139500, 126000, 145000, 259000, 204500, 171600, 376080, 120250, 175000, 252000, 280700, 156400, 130000, 87980, 105000, 180180, 129000, 146000, 160000, 130000, 165000, 65000, 110000, 48289, 90000 };
            int[] massive_salaries = new int[1499] { 85847, 30000, 25500, 175000, 120000, 222200, 136000, 219000, 141000, 147100, 90700, 130000, 100000, 213660, 130760, 147100, 90700, 170000, 150000, 150000, 110000, 275000, 174000, 230000, 143200, 225000, 156400, 200000, 130000, 90000, 72000, 253200, 90700, 342810, 184590, 162500, 130000, 105380, 64500, 100000, 30000, 20984, 204620, 110680, 270703, 221484, 212750, 185000, 262000, 245000, 275300, 183500, 218500, 199098, 203300, 123600, 189110, 139000, 258750, 185000, 231500, 166000, 172500, 110500, 238000, 176000, 237000, 201450, 309400, 159100, 115000, 81500, 237000, 201450, 280000, 210000, 280100, 168100, 193500, 139000, 65062, 150000, 69751, 300000, 96578, 185900, 129300, 225000, 175000, 185000, 140000, 48289, 38631, 105000, 70000, 163196, 145885, 217000, 185000, 202800, 104300, 145000, 65000, 165000, 132300, 179170, 94300, 152500, 116450, 247300, 133800, 203000, 133000, 220000, 56536, 150000, 120000, 289800, 214000, 179820, 143860, 283200, 188800, 289800, 214200, 185900, 129300, 252000, 129000, 155000, 140000, 161800, 141600, 342300, 176100, 100000, 70000, 85000, 65000, 138784, 83270, 75000, 70000, 204500, 138900, 318300, 212200, 95000, 75000, 195000, 160000, 230000, 143200, 100000, 70000, 105000, 20670, 46178, 42533, 145000, 115000, 168400, 105200, 309400, 159100, 190000, 150000, 162500, 130000, 150000, 120000, 145000, 120000, 222200, 136000, 54685, 42533, 241000, 155000, 220000, 190000, 66837, 54685, 15000, 85066, 57723, 85000, 75000, 160000, 140000, 300000, 250000, 228000, 186000, 190000, 170000, 230000, 200000, 180000, 115000, 200000, 115000, 53654, 220000, 205000, 180000, 130000, 200000, 150000, 215000, 170000, 247500, 172200, 224000, 176000, 120000, 75000, 17022, 68318, 75020, 140000, 120000, 128000, 81500, 145000, 115000, 185000, 140000, 329500, 269600, 100000, 80000, 250000, 162500, 200000, 145000, 100000, 145000, 115000, 203500, 152000, 239000, 122900, 237000, 145000, 191765, 134236, 190000, 112000, 88256, 85000, 65000, 135000, 105500, 293000, 185000, 80000, 70000, 220000, 160000, 175000, 145000, 200000, 148500, 48289, 38631, 240500, 123700, 152900, 117100, 173000, 113000, 260000, 136000, 175000, 110000, 260000, 136000, 130000, 110000, 205000, 184000, 149500, 127075, 195000, 160000, 219535, 146115, 170000, 135000, 175000, 145000, 199000, 162000, 222200, 136000, 221000, 153000, 187000, 128000, 210000, 136000, 175000, 100000, 179000, 109000, 245000, 180000, 142000, 75000, 198800, 105200, 125000, 112000, 210000, 155000, 115000, 86000, 165000, 140000, 139000, 106000, 40663, 275000, 50000, 280700, 150450, 51753, 250500, 159500, 145000, 115000, 140000, 120000, 130001, 71907, 93918, 51962, 175000, 135000, 85000, 65000, 257000, 147000, 222000, 175000, 203000, 133200, 213660, 130760, 221000, 147000, 100000, 80000, 185900, 129300, 238000, 156000, 304000, 199000, 48289, 150000, 130000, 140000, 110000, 90000, 75000, 195895, 102772, 240000, 183600, 130000, 80000, 250000, 150000, 160000, 120000, 289076, 202353, 145000, 120000, 155000, 106000, 200000, 160000, 157750, 104650, 180000, 140000, 200000, 145000, 68000, 60000, 48289, 38631, 85000, 65000, 125000, 90000, 105000, 90000, 179820, 143860, 135000, 105500, 155000, 125000, 241000, 181000, 252000, 154000, 180000, 155000, 191765, 134236, 175000, 145000, 237000, 145000, 155000, 125000, 80000, 70000, 146000, 75000, 64200, 56100, 170000, 130000, 208450, 170550, 125000, 100000, 135000, 120000, 200000, 170000, 171250, 113750, 222200, 136000, 260000, 136000, 153600, 100500, 205000, 184000, 115000, 95000, 182500, 121500, 203100, 114500, 72914, 54685, 252000, 129000, 92700, 61800, 160000, 130000, 258000, 190000, 170000, 135000, 167500, 106500, 195000, 160000, 146000, 75000, 59888, 286000, 207000, 100000, 80000, 223250, 178600, 353200, 249300, 230000, 220000, 297300, 198200, 210000, 151800, 200000, 170000, 317070, 170730, 128000, 81500, 21461, 108000, 60000, 134000, 124000, 171250, 113750, 165000, 132300, 225000, 175000, 230000, 124500, 247500, 172200, 175000, 145000, 148700, 125600, 145000, 115000, 200000, 150000, 160000, 120000, 185000, 120250, 275300, 183000, 170000, 125000, 167500, 106500, 250000, 200000, 135000, 423834, 216000, 184000, 180000, 165000, 185900, 129300, 145000, 120000, 143865, 115092, 130000, 90000, 173000, 132000, 208049, 128500, 179820, 143860, 167500, 106500, 275300, 183500, 149600, 102000, 145000, 100000, 190000, 95000, 153600, 106800, 96578, 80481, 128000, 85000, 151000, 140000, 275300, 183500, 220000, 170000, 135000, 105500, 100000, 80000, 7000, 42923, 160000, 145000, 154000, 143000, 78990, 51039, 190000, 120000, 85066, 51039, 109371, 72914, 150000, 111000, 265000, 235000, 121093, 73546, 160000, 130000, 75000, 60400, 85000, 75000, 252000, 129000, 92700, 61800, 172309, 60093, 83500, 52500, 201036, 134024, 165000, 140000, 62000, 58000, 172000, 115000, 125000, 90000, 163800, 126000, 237000, 145000, 90000, 90000, 139500, 109400, 258000, 190000, 145000, 120000, 205600, 105700, 252000, 129000, 239748, 159832, 186300, 102500, 165000, 132300, 190000, 126000, 149040, 113900, 153600, 106800, 172600, 107900, 180180, 106020, 376080, 213120, 153600, 100500, 206500, 121600, 260000, 225000, 194500, 115500, 170000, 90000, 95000, 70000, 275000, 160000, 115934, 81666, 175000, 120000, 150000, 120000, 200000, 175000, 206000, 130000, 138000, 92000, 65000, 48000, 110000, 75000, 130000, 87000, 160000, 112000, 162500, 130000, 299500, 245100, 145000, 100000, 147100, 90700, 115100, 73900, 168400, 105200, 210000, 160000, 145000, 100000, 222200, 136000, 100000, 85000, 85066, 57723, 200000, 145000, 140000, 95000, 185000, 120250, 130000, 205000, 140000, 297300, 198200, 141288, 94192, 184000, 143000, 70000, 55000, 275300, 183500, 75000, 65000, 160000, 147000, 149040, 113900, 75020, 180180, 106020, 17022, 70000, 80000, 18238, 250000, 150000, 139500, 109400, 105000, 70000, 210914, 116704, 150000, 100000, 146000, 75000, 75000, 60000, 185700, 165000, 160000, 130000, 169000, 110600, 193000, 136850, 139500, 109400, 276000, 178500, 59020, 48289, 75116, 48289, 195652, 101228, 136956, 101228, 252000, 129000, 130000, 150000, 163800, 126000, 260000, 110000, 170000, 130000, 247500, 172200, 239748, 159832, 163800, 126000, 128750, 106250, 252000, 129000, 299500, 245100, 155000, 140000, 167500, 106500, 188500, 117000, 250000, 138000, 130000, 100000, 123405, 140000, 120000, 160000, 135000, 104500, 70000, 90000, 70000, 153600, 106800, 125000, 90000, 185000, 125000, 127000, 94000, 210550, 153300, 200000, 150000, 161500, 119500, 175000, 145000, 175000, 148750, 105000, 85000, 215000, 146300, 214618, 72000, 60000, 153400, 122700, 260000, 175000, 186300, 123900, 340000, 150000, 153400, 122700, 250000, 175000, 64385, 185900, 121700, 153600, 106800, 50000, 100000, 247500, 172200, 310000, 239000, 125000, 110000, 150000, 100000, 149076, 82365, 146000, 75000, 139500, 109400, 139500, 109400, 149600, 102000, 97218, 48609, 252000, 129000, 95000, 85500, 185900, 121700, 150000, 100000, 145000, 125000, 150000, 97750, 201000, 122000, 252000, 129000, 120000, 75000, 116990, 82920, 185900, 129300, 200000, 125000, 201000, 122000, 204500, 142200, 155000, 140000, 205920, 171600, 121500, 78000, 154000, 116000, 190000, 136000, 78990, 43809, 180000, 110000, 275300, 183000, 170000, 140000, 154000, 116000, 160000, 130000, 200000, 120000, 175000, 160000, 127599, 103294, 153600, 106800, 85000, 75000, 225000, 156400, 150000, 120000, 163800, 126000, 145000, 90000, 204500, 142200, 95000, 85500, 167500, 106500, 163800, 126000, 155000, 140000, 250000, 200000, 260000, 186000, 160000, 130000, 200000, 150000, 48289, 38631, 150000, 120000, 30000, 185000, 125000, 34320, 9289, 75116, 106000, 175000, 130000, 122000, 93800, 150000, 90000, 165000, 112000, 220000, 71897, 64385, 204500, 142200, 15806, 200000, 175000, 185900, 129300, 185900, 121700, 204500, 142200, 40000, 29453, 180180, 106020, 136000, 104000, 125000, 110000, 153400, 122700, 310000, 239000, 152380, 121904, 185900, 129300, 247500, 172200, 168400, 105200, 128280, 106900, 192000, 140000, 100000, 107309, 85847, 275000, 174000, 139500, 109400, 139500, 109400, 170500, 85000, 72946, 54365, 160288, 127467, 80000, 65000, 124740, 65488, 72200, 64980, 153600, 106800, 179975, 86466, 120000, 90000, 51039, 42533, 149076, 82365, 169000, 110600, 175000, 120000, 230000, 180000, 153600, 106800, 140000, 120000, 205920, 171600, 165000, 125000, 265000, 185000, 130000, 168000, 38631, 95000, 85500, 147100, 90700, 167580, 87980, 202000, 135000, 163800, 126000, 163800, 126000, 104000, 65000, 230000, 148000, 269000, 158000, 197000, 106000, 150000, 100000, 290000, 210000, 192000, 172800, 300240, 200160, 300240, 200160, 175000, 140000, 169000, 100000, 370000, 245000, 115447, 110000, 80000, 55000, 48000, 95000, 85000, 137500, 81500, 323300, 184700, 30000, 186000, 153088, 190000, 160000, 200000, 150000, 190000, 183310, 240000, 180000, 200000, 150000, 299500, 245100, 144000, 66000, 148500, 126277, 228000, 120000, 180000, 90000, 126500, 78000, 180000, 160000, 272000, 170000, 80000, 60000, 259000, 146000, 200000, 160000, 310000, 239000, 142000, 95000, 155000, 139500, 140000, 120000, 259000, 146000, 109371, 72914, 17779, 19522, 247500, 172200, 225000, 156400, 139500, 109400, 125000, 90000, 107309, 75116, 185900, 129300, 139500, 109400, 120000, 75000, 169000, 110600, 288000, 140000, 288000, 140000, 120000, 90000, 72914, 60761, 215050, 156400, 198000, 114000, 75000, 60000, 204500, 142200, 209300, 182200, 140000, 120000, 85000, 48609, 120000, 60000, 147100, 90700, 230000, 170000, 227000, 108000, 180000, 160000, 180000, 160000, 180000, 130000, 55800, 51508, 60000, 50000, 226700, 133300, 252000, 129000, 151902, 9727, 80000, 52500, 250000, 162500, 85000, 75000, 153600, 106800, 165000, 124000, 115934, 81666, 167580, 87980, 250000, 63000, 253750, 169200, 253750, 169200, 170000, 120000, 124740, 65488, 213580, 163625, 12000, 375000, 101943, 16414, 220000, 170000, 235000, 210000, 180000, 115000, 200000, 115000, 231250, 138750, 284310, 153090, 160000, 75000, 125000, 105000, 109371, 85066, 55000, 48000, 100000, 225900, 156400, 250000, 162500, 318300, 188800, 385000, 60000, 110000, 95000, 145000, 135000, 180180, 106020, 93919, 51962, 241871, 133832, 170000, 90000, 210914, 116704, 192500, 140000, 149076, 82365, 36000, 175000, 148750, 370000, 200000, 235000, 185000, 121523, 97218, 216100, 140800, 145828, 121523, 53654, 110000, 128000, 81500, 66837, 63192, 60761, 54685, 284000, 236000, 248100, 145900, 155850, 102544, 151410, 115360, 66531, 59020, 125686, 100000, 12767, 250000, 162500, 185000, 120250, 26827, 180000, 85000, 70000, 135000, 100000, 155000, 140000, 204500, 142200, 226700, 133300, 225000, 156400, 163800, 126000, 163800, 126000, 220000, 150000, 145000, 115000, 204500, 138900, 162500, 130000, 150000, 107000, 175000, 110000, 226700, 133300, 252000, 129000, 150000, 125000, 252000, 129000, 225000, 156400, 23000, 110000, 265000, 182750, 130000, 100000, 153600, 106800, 137500, 81500, 314100, 195800, 205000, 180000, 165000, 144000, 160000, 100000, 200000, 145000, 150000, 100000, 199000, 112000, 105000, 70000, 130000, 180180, 106020, 160000, 135000, 183000, 134000, 220000, 150000, 350000, 262500, 122000, 94000, 276000, 184000, 310000, 239000, 225000, 156400, 180000, 150000, 228000, 152000, 209450, 158677, 175000, 145000, 240000, 170000, 103200, 61200, 155000, 66970, 63312, 237000, 145000, 240000, 139000, 174500, 113000, 130000, 87000, 160000, 108000, 165000, 107250, 300000, 119000, 285800, 154600, 60795, 30000, 220000, 195000, 168400, 105200, 206000, 160000, 200000, 175000, 231250, 138750, 153000, 94000, 240500, 123700, 160000, 90000, 124234, 74540, 109000, 79000, 84053, 50000, 275300, 183500, 275300, 183500, 160000, 125600, 170000, 120000, 225000, 140000, 141290, 74178, 150000 };
            Array.Sort(test_array);
            var mode = (from item in test_array.ToList()
                        group item by item into g
                        orderby g.Count() descending
                        select g.Key).First();
            var median = test_array[49];
            int x_max = test_array[99];
            int x_min = test_array[0];
            double m = Math.Round(1 + 3.3221 * Math.Log10(100));
            double k = Math.Round((x_max - x_min) / m);
            double x_start = x_min - 0.5 * k;
            int counter = 0;
            bool flag = true;
            int k_1 = 0;
            string[] intervals = new string[10];
            int[] quantity = new int[10];
            int iter = 0;
            int prev = 0;
            List<double> average_x = new List<double>();
            Console.WriteLine($"x_max = {x_max}");
            Console.WriteLine($"x_min = {x_min}");
            Console.WriteLine($"m = {m}");
            Console.WriteLine($"k = {k}");
            while (flag)
            {
                counter = 0;
                for (int i = 0; i < 100; i++)
                {
                    if (test_array[i] >= x_start + k_1 && test_array[i] < x_start + k + k_1)
                    {
                        counter++;
                    }
                }
                if (counter == 0 && b != 100)
                {
                    k_1 += (int)k;
                }
                if (b == 100)
                {
                    flag = false;
                    break;
                }
                else if (iter == 0 & counter < 5)
                {

                    find(counter, x_start, k_1, 2 * k, test_array, average_x);
                    iter++;
                    intervals[iter - 1] = $"({x_start + k_1};{x_start + 2 * k + k_1})";
                    x_start += k;
                }
                else
                {
                    Console.WriteLine();
                    find(counter, x_start, k_1, k, test_array, average_x);
                    iter++;
                    intervals[iter - 1] = $"({x_start + k_1};{x_start + 2 * k + k_1})";
                }
                prev++;

                if (iter == 1)
                {
                    quantity[iter - 1] = b;
                }
                else
                {
                    quantity[iter - 1] = c;
                }

                Console.WriteLine($"quantity : {quantity[iter - 1]}");
                k_1 += (int)k;

            }

            Console.WriteLine();
            int sum = 0;
            double arithmetic_mean = 0;
            double dispersion = 0;
            double asymmetry_coefficient = 0;
            double kurtosis = 0;
            for (int i = 0; i < average_x.Count; i++)
            {
                Console.WriteLine($"Interval{intervals[i]}; Average : {average_x[i]}; Quantity : {quantity[i]}; " +
                    $"Frequency(w_i) : {(double)quantity[i] / 100}; Accumulated quantity : {sum += quantity[i]}; Accumulated Frequency : {(double)sum / 100}");
                arithmetic_mean += (average_x[i] * quantity[i]) / 100;
                dispersion += (Math.Pow(average_x[i], 2) * quantity[i]) / 100;
            }
            for (int j = 0; j < average_x.Count; j++)
            {
                dispersion += (Math.Pow(average_x[j] - arithmetic_mean, 2) * quantity[j]) / 100;
            }
            double mean_square_deviation = Math.Round(Math.Sqrt(dispersion), 2);
            double variation_coefficient = Math.Round((mean_square_deviation / arithmetic_mean) * 100, 2);
            for (int j = 0; j < average_x.Count; j++)
            {
                asymmetry_coefficient += (Math.Pow(average_x[j] - arithmetic_mean, 3) * quantity[j]) / (100 * Math.Pow(mean_square_deviation, 3));
                kurtosis += (Math.Pow(average_x[j] - arithmetic_mean, 4) * quantity[j]) / (100 * Math.Pow(mean_square_deviation, 4));
            }
            Console.WriteLine("Mode : " + mode);
            Console.WriteLine("Median : " + median);
            Console.WriteLine("The arithmetic mean of the interval variation series x` : " + Math.Round(arithmetic_mean, 2));
            Console.WriteLine("Dispesion s^2 : " + Math.Round(dispersion, 2));
            Console.WriteLine("Mean square deviation s : " + mean_square_deviation);
            Console.WriteLine("Variation coefficient v : " + variation_coefficient + "%");
            Console.WriteLine("Asymmetry coefficient :" + Math.Round(asymmetry_coefficient, 2));
            Console.WriteLine("Kurtosis coefficient :" + Math.Round(kurtosis, 2));
            Console.WriteLine("**********************************************************************************************");
            var Inter = new Dictionary<string, int>();

            for (int i = 0; i < iter; i++)
            {
                Inter.Add($"Interval{intervals[i]}; " + $"quantity : {quantity[i]}", quantity[i]);
            };

            var maxInetrvalLength = Inter.Keys.Max(k => k.Length);

            var colors = new[]
            {
                 ConsoleColor.Red, ConsoleColor.DarkBlue, ConsoleColor.Green,
                 ConsoleColor.DarkYellow, ConsoleColor.Cyan, ConsoleColor.DarkMagenta,

            };

            var colorIndex = 0;

            foreach (KeyValuePair<string, int> kvp in Inter)
            {

                Console.Write(kvp.Key.PadLeft(maxInetrvalLength + 2, ' ') + " | ");
                Console.ForegroundColor = colors[colorIndex++ % colors.Length];
                Console.WriteLine(new string('█', kvp.Value));
                Console.ResetColor();
            }
            Console.Write("\nDone! Press any key to exit...");

            xlWorkSheet.Cells[1, 1] = "";
            xlWorkSheet.Cells[1, 2] = "Histogram for interval variation series";

            for (int j = 1; j <= average_x.Count; j++)
            {
                xlWorkSheet.Cells[j + 1, 1] = intervals[j - 1];
                xlWorkSheet.Cells[j + 1, 2] = quantity[j - 1];
            };
            xlWorkSheet1.Cells[1, 1] = "";
            xlWorkSheet1.Cells[1, 2] = "A polygon for an interval variation series";
            for (int j = 1; j <= average_x.Count; j++)
            {
                xlWorkSheet1.Cells[j + 1, 1] = average_x[j - 1];
                xlWorkSheet1.Cells[j + 1, 2] = (double)quantity[j - 1] / 100;
            }
            xlWorkSheet2.Cells[1, 1] = "";
            xlWorkSheet2.Cells[1, 2] = "Cumulatives for an interval variational series";
            int sum1 = 0;
            for (int j = 1; j <= average_x.Count; j++)
            {
                xlWorkSheet2.Cells[j + 1, 1] = average_x[j - 1];
                xlWorkSheet2.Cells[j + 1, 2] = sum1 += quantity[j - 1];
            }




            Excel.Range chartRange;

            Excel.ChartObjects xlCharts = (Excel.ChartObjects)xlWorkSheet.ChartObjects(Type.Missing);
            Excel.ChartObject myChart = (Excel.ChartObject)xlCharts.Add(300, 80, 500, 250);
            Excel.Chart chartPage = myChart.Chart;
            chartRange = xlWorkSheet.get_Range("A1", $"b{average_x.Count + 1}");
            chartPage.SetSourceData(chartRange, misValue);
            chartPage.ChartType = Excel.XlChartType.xlColumnStacked;

            Excel.Range chartRange1;
            Excel.ChartObjects xlCharts1 = (Excel.ChartObjects)xlWorkSheet1.ChartObjects(Type.Missing);
            Excel.ChartObject myChart1 = (Excel.ChartObject)xlCharts1.Add(300, 80, 500, 250);
            Excel.Chart chartPage1 = myChart1.Chart;
            chartRange1 = xlWorkSheet1.get_Range("A1", $"b{average_x.Count + 1}");
            chartPage1.SetSourceData(chartRange1, misValue);
            chartPage1.ChartType = Excel.XlChartType.xlLineMarkersStacked;

            Excel.Range chartRange2;
            Excel.ChartObjects xlCharts2 = (Excel.ChartObjects)xlWorkSheet2.ChartObjects(Type.Missing);
            Excel.ChartObject myChart2 = (Excel.ChartObject)xlCharts2.Add(300, 80, 500, 250);
            Excel.Chart chartPage2 = myChart2.Chart;
            chartRange2 = xlWorkSheet2.get_Range("A1", $"b{average_x.Count + 1}");
            chartPage2.SetSourceData(chartRange2, misValue);
            chartPage2.ChartType = Excel.XlChartType.xlLineMarkersStacked;

            xlWorkBook.SaveAs(@".\lab.xlsx");
            xlWorkBook.Close(true, misValue, misValue);
            xlApp.Quit();

            Console.ReadKey();

        }
        public static void find(int counter, double x_start, int k_1, double k, int[] test_array, List<double> list)
        {
            counter = 0;
            Console.Write($"Interval ({x_start + k_1};{x_start + k + k_1}):");
            list.Add((x_start + k_1 + x_start + k + k_1) / 2);
            for (int i = 0; i < 100; i++)
            {
                if (test_array[i] >= x_start + k_1 && test_array[i] < x_start + k + k_1)
                {
                    Console.Write($"{test_array[i]}; ");
                    counter++;
                }

            }

            b += counter;
            c = counter;

        }


    }
}